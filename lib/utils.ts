import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}

// upload asset
export const uploadAsset = async ({
  asset,
  assetType,
}: {
  asset: File;
  assetType: string;
}) => {
  const data = new FormData();
  data.append("file", asset);
  data.append("upload_preset", "social-media-image-upload");
  data.append("cloud_name", "fajarda1storage");
  // specify folder
  data.append("folder", "Threads");
  const cloudinaryURL = `https://api.cloudinary.com/v1_1/fajarda1storage/${assetType}/upload`;

  try {
    const response = await fetch(cloudinaryURL, {
      method: "POST",
      body: data,
    });
    // asset POST response data & return the asset URL alone
    const assetData = await response.json();

    // store this url in the database
    return assetData.url;
  } catch (err) {
    console.error(err);
  }
};

// filter suggested users
export const createIndiciesArr = (shownUsers: number, suggestedUsers) => {
  const indices = new Set();

  while (indices.size < shownUsers) {
    const randomIndex = Math.floor(Math.random() * suggestedUsers.length);
    indices.add(randomIndex);
  }
  return Array.from(indices);
};
